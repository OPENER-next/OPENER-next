name: Build app for target platforms

on:
  # Trigger workflow when new tag is pushed.
  push:
    tags:
      - 'v*'
  # Allow running this workflow manually from the Actions tab.
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent build and deployment workflow
concurrency:
  group: "build"
  cancel-in-progress: true

jobs:
  build_android:
    strategy:
      matrix:
        flavor: [ standard, fdroid ]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install yq
      run: pip3 install yq

    - name: Read Flutter version from pubspec.yaml
      id: flutterVersion
      run: |
        echo "result=$(yq -r .environment.flutter pubspec.yaml)" >> $GITHUB_OUTPUT

    - name: Override dependencies in pubspec.yaml to be FLOSS
      if: matrix.flavor == 'fdroid'
      run: |
        yq -y -i '.dependency_overrides.geolocator_android.git = {"url": "https://github.com/Zverik/flutter-geolocator.git", "ref": "floss", "path": "geolocator_android"}' pubspec.yaml

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ steps.flutterVersion.outputs.result }}
        channel: 'stable'

    - name: Check Flutter version
      run: flutter --version

    - name: Download pub dependencies
      run: flutter pub get

    - name: Run build_runner
      run: flutter pub run build_runner build --delete-conflicting-outputs

    - name: Create Android keystore file
      run: echo -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > key.jks

    # See: https://docs.flutter.dev/deployment/android#reference-the-keystore-from-the-app
    # The key store and key password should be identical according to
    # https://developer.android.com/studio/publish/app-signing#generate-key
    # Don't touch: Keep the line breaks as they are even though it's ugly
    - name: Create key.properties
      run: |-
        echo -e "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        keyPassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
        storeFile=$(readlink -f key.jks)" >> android/key.properties

    - name: Build App Bundle
      if: matrix.flavor != 'fdroid'
      run: >-
        flutter build appbundle
        --dart-define=THUNDERFOREST_API_KEY=${{ secrets.THUNDERFOREST_API_KEY }}
        --dart-define=IS_RELEASE=true
        --flavor ${{ matrix.flavor }}

    - name: Build APK
      run: >-
        flutter build apk
        --dart-define=THUNDERFOREST_API_KEY=${{ secrets.THUNDERFOREST_API_KEY }}
        --dart-define=IS_RELEASE=true
        --flavor ${{ matrix.flavor }}

    - name: Rename App Bundle artifact
      if: matrix.flavor != 'fdroid'
      run: >-
        mv build/app/outputs/bundle/${{ matrix.flavor }}Release/app-${{ matrix.flavor }}-release.aab
        build/app/outputs/bundle/${{ matrix.flavor }}Release/OpenStop_${{ matrix.flavor }}_${{ github.ref_name }}.aab

    - name: Rename APK artifact
      run: >-
        mv build/app/outputs/flutter-apk/app-${{ matrix.flavor }}-release.apk
        build/app/outputs/flutter-apk/OpenStop_${{ matrix.flavor }}_${{ github.ref_name }}.apk

    - name: Upload App Bundle artifact
      if: matrix.flavor != 'fdroid'
      uses: actions/upload-artifact@v3
      with:
        name: Android App Bundle ${{ matrix.flavor }} ${{ github.ref_name }}
        path: build/app/outputs/bundle/${{ matrix.flavor }}Release/OpenStop_${{ matrix.flavor }}_${{ github.ref_name }}.aab

    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: Android APK ${{ matrix.flavor }} ${{ github.ref_name }}
        path: build/app/outputs/flutter-apk/OpenStop_${{ matrix.flavor }}_${{ github.ref_name }}.apk

  build_ios:
    runs-on: macos-latest

    env:
      BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_DISTRIBUTION_CERT_BASE64 }}
      P12_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERT_PASSWORD }}
      BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_MOBILEPROVISION_BASE64 }}
      KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
      BUILD_EXPORTOPTIONS_BASE64: ${{ secrets.APPLE_EXPORTOPTIONS_BASE64 }}
      EXPORTOPTIONS_PATH: ${{ RUNNER_TEMP }}/ExportOptions.plist

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install yq
        run: pip3 install yq

      - name: Read Flutter version from pubspec.yaml
        id: flutterVersion
        run: |
          echo "result=$(yq -r .environment.flutter pubspec.yaml)" >> $GITHUB_OUTPUT

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ steps.flutterVersion.outputs.result }}
          channel: 'stable'

      - name: Download pub dependencies
        run: flutter pub get

      - name: Install Apple certificate and provisioning profile
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate, provisioning profile and ExportOptions.plist
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$BUILD_EXPORTOPTIONS_BASE64" | base64 --decode --output $EXPORTOPTIONS_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Run build_runner
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Create IPA
        run: |
          flutter build ipa \
          --release \
          --dart-define=THUNDERFOREST_API_KEY=${{ secrets.THUNDERFOREST_API_KEY }} \
          --dart-define=IS_RELEASE=true \
          --export-options-plist=$EXPORTOPTIONS_PATH

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v3
        with:
          name: iOS App ${{ github.ref_name }}
          path: build/ios/ipa/*.ipa

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  build_web:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install yq
      run: pip3 install yq

    - name: Read Flutter version from pubspec.yaml
      id: flutterVersion
      run: |
        echo "result=$(yq -r .environment.flutter pubspec.yaml)" >> $GITHUB_OUTPUT 

    - name: Setup Pages
      uses: actions/configure-pages@v2

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ steps.flutterVersion.outputs.result }}
        channel: 'stable'

    - name: Download pub dependencies
      run: flutter pub get

    - name: Run build_runner
      run: flutter pub run build_runner build --delete-conflicting-outputs

    - name: Build web
      run: >-
        flutter build web
        --dart-define=THUNDERFOREST_API_KEY=${{ secrets.THUNDERFOREST_API_KEY }}
        --dart-define=IS_RELEASE=true

    # This step is mainly required because Google considers a link to a Github markdown file as "editable" which violates their policy.
    # Therefore we convert the markdown file to HTML and publish it together with the App via Github pages here.
    - name: Convert Privacy Policy to HTML
      uses: BaileyJM02/markdown-to-pdf@v1.2.0
      with:
        input_path: PRIVACY_POLICY.md
        output_dir: build/web/
        build_html: true
        build_pdf: false

    - name: Upload web artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: 'build/web'

  deploy_web:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build_web
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
